// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EcrImage struct {
	pulumi.ResourceState
}

// NewEcrImage registers a new resource with the given unique name, arguments, and options.
func NewEcrImage(ctx *pulumi.Context,
	name string, args *EcrImageArgs, opts ...pulumi.ResourceOption) (*EcrImage, error) {
	if args == nil {
		args = &EcrImageArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource EcrImage
	err := ctx.RegisterRemoteComponentResource("ipidp:aws_ecs_service/service:EcrImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type ecrImageArgs struct {
}

// The set of arguments for constructing a EcrImage resource.
type EcrImageArgs struct {
}

func (EcrImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecrImageArgs)(nil)).Elem()
}

type EcrImageInput interface {
	pulumi.Input

	ToEcrImageOutput() EcrImageOutput
	ToEcrImageOutputWithContext(ctx context.Context) EcrImageOutput
}

func (*EcrImage) ElementType() reflect.Type {
	return reflect.TypeOf((**EcrImage)(nil)).Elem()
}

func (i *EcrImage) ToEcrImageOutput() EcrImageOutput {
	return i.ToEcrImageOutputWithContext(context.Background())
}

func (i *EcrImage) ToEcrImageOutputWithContext(ctx context.Context) EcrImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcrImageOutput)
}

// EcrImageArrayInput is an input type that accepts EcrImageArray and EcrImageArrayOutput values.
// You can construct a concrete instance of `EcrImageArrayInput` via:
//
//	EcrImageArray{ EcrImageArgs{...} }
type EcrImageArrayInput interface {
	pulumi.Input

	ToEcrImageArrayOutput() EcrImageArrayOutput
	ToEcrImageArrayOutputWithContext(context.Context) EcrImageArrayOutput
}

type EcrImageArray []EcrImageInput

func (EcrImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcrImage)(nil)).Elem()
}

func (i EcrImageArray) ToEcrImageArrayOutput() EcrImageArrayOutput {
	return i.ToEcrImageArrayOutputWithContext(context.Background())
}

func (i EcrImageArray) ToEcrImageArrayOutputWithContext(ctx context.Context) EcrImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcrImageArrayOutput)
}

// EcrImageMapInput is an input type that accepts EcrImageMap and EcrImageMapOutput values.
// You can construct a concrete instance of `EcrImageMapInput` via:
//
//	EcrImageMap{ "key": EcrImageArgs{...} }
type EcrImageMapInput interface {
	pulumi.Input

	ToEcrImageMapOutput() EcrImageMapOutput
	ToEcrImageMapOutputWithContext(context.Context) EcrImageMapOutput
}

type EcrImageMap map[string]EcrImageInput

func (EcrImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcrImage)(nil)).Elem()
}

func (i EcrImageMap) ToEcrImageMapOutput() EcrImageMapOutput {
	return i.ToEcrImageMapOutputWithContext(context.Background())
}

func (i EcrImageMap) ToEcrImageMapOutputWithContext(ctx context.Context) EcrImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcrImageMapOutput)
}

type EcrImageOutput struct{ *pulumi.OutputState }

func (EcrImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcrImage)(nil)).Elem()
}

func (o EcrImageOutput) ToEcrImageOutput() EcrImageOutput {
	return o
}

func (o EcrImageOutput) ToEcrImageOutputWithContext(ctx context.Context) EcrImageOutput {
	return o
}

type EcrImageArrayOutput struct{ *pulumi.OutputState }

func (EcrImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcrImage)(nil)).Elem()
}

func (o EcrImageArrayOutput) ToEcrImageArrayOutput() EcrImageArrayOutput {
	return o
}

func (o EcrImageArrayOutput) ToEcrImageArrayOutputWithContext(ctx context.Context) EcrImageArrayOutput {
	return o
}

func (o EcrImageArrayOutput) Index(i pulumi.IntInput) EcrImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcrImage {
		return vs[0].([]*EcrImage)[vs[1].(int)]
	}).(EcrImageOutput)
}

type EcrImageMapOutput struct{ *pulumi.OutputState }

func (EcrImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcrImage)(nil)).Elem()
}

func (o EcrImageMapOutput) ToEcrImageMapOutput() EcrImageMapOutput {
	return o
}

func (o EcrImageMapOutput) ToEcrImageMapOutputWithContext(ctx context.Context) EcrImageMapOutput {
	return o
}

func (o EcrImageMapOutput) MapIndex(k pulumi.StringInput) EcrImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcrImage {
		return vs[0].(map[string]*EcrImage)[vs[1].(string)]
	}).(EcrImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcrImageInput)(nil)).Elem(), &EcrImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcrImageArrayInput)(nil)).Elem(), EcrImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcrImageMapInput)(nil)).Elem(), EcrImageMap{})
	pulumi.RegisterOutputType(EcrImageOutput{})
	pulumi.RegisterOutputType(EcrImageArrayOutput{})
	pulumi.RegisterOutputType(EcrImageMapOutput{})
}
