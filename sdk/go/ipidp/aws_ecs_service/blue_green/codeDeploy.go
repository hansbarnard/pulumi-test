// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blue_green

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CodeDeploy struct {
	pulumi.ResourceState
}

// NewCodeDeploy registers a new resource with the given unique name, arguments, and options.
func NewCodeDeploy(ctx *pulumi.Context,
	name string, args *CodeDeployArgs, opts ...pulumi.ResourceOption) (*CodeDeploy, error) {
	if args == nil {
		args = &CodeDeployArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource CodeDeploy
	err := ctx.RegisterRemoteComponentResource("ipidp:aws_ecs_service/blue_green:CodeDeploy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type codeDeployArgs struct {
}

// The set of arguments for constructing a CodeDeploy resource.
type CodeDeployArgs struct {
}

func (CodeDeployArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeDeployArgs)(nil)).Elem()
}

type CodeDeployInput interface {
	pulumi.Input

	ToCodeDeployOutput() CodeDeployOutput
	ToCodeDeployOutputWithContext(ctx context.Context) CodeDeployOutput
}

func (*CodeDeploy) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeDeploy)(nil)).Elem()
}

func (i *CodeDeploy) ToCodeDeployOutput() CodeDeployOutput {
	return i.ToCodeDeployOutputWithContext(context.Background())
}

func (i *CodeDeploy) ToCodeDeployOutputWithContext(ctx context.Context) CodeDeployOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeDeployOutput)
}

// CodeDeployArrayInput is an input type that accepts CodeDeployArray and CodeDeployArrayOutput values.
// You can construct a concrete instance of `CodeDeployArrayInput` via:
//
//	CodeDeployArray{ CodeDeployArgs{...} }
type CodeDeployArrayInput interface {
	pulumi.Input

	ToCodeDeployArrayOutput() CodeDeployArrayOutput
	ToCodeDeployArrayOutputWithContext(context.Context) CodeDeployArrayOutput
}

type CodeDeployArray []CodeDeployInput

func (CodeDeployArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeDeploy)(nil)).Elem()
}

func (i CodeDeployArray) ToCodeDeployArrayOutput() CodeDeployArrayOutput {
	return i.ToCodeDeployArrayOutputWithContext(context.Background())
}

func (i CodeDeployArray) ToCodeDeployArrayOutputWithContext(ctx context.Context) CodeDeployArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeDeployArrayOutput)
}

// CodeDeployMapInput is an input type that accepts CodeDeployMap and CodeDeployMapOutput values.
// You can construct a concrete instance of `CodeDeployMapInput` via:
//
//	CodeDeployMap{ "key": CodeDeployArgs{...} }
type CodeDeployMapInput interface {
	pulumi.Input

	ToCodeDeployMapOutput() CodeDeployMapOutput
	ToCodeDeployMapOutputWithContext(context.Context) CodeDeployMapOutput
}

type CodeDeployMap map[string]CodeDeployInput

func (CodeDeployMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeDeploy)(nil)).Elem()
}

func (i CodeDeployMap) ToCodeDeployMapOutput() CodeDeployMapOutput {
	return i.ToCodeDeployMapOutputWithContext(context.Background())
}

func (i CodeDeployMap) ToCodeDeployMapOutputWithContext(ctx context.Context) CodeDeployMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeDeployMapOutput)
}

type CodeDeployOutput struct{ *pulumi.OutputState }

func (CodeDeployOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeDeploy)(nil)).Elem()
}

func (o CodeDeployOutput) ToCodeDeployOutput() CodeDeployOutput {
	return o
}

func (o CodeDeployOutput) ToCodeDeployOutputWithContext(ctx context.Context) CodeDeployOutput {
	return o
}

type CodeDeployArrayOutput struct{ *pulumi.OutputState }

func (CodeDeployArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeDeploy)(nil)).Elem()
}

func (o CodeDeployArrayOutput) ToCodeDeployArrayOutput() CodeDeployArrayOutput {
	return o
}

func (o CodeDeployArrayOutput) ToCodeDeployArrayOutputWithContext(ctx context.Context) CodeDeployArrayOutput {
	return o
}

func (o CodeDeployArrayOutput) Index(i pulumi.IntInput) CodeDeployOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CodeDeploy {
		return vs[0].([]*CodeDeploy)[vs[1].(int)]
	}).(CodeDeployOutput)
}

type CodeDeployMapOutput struct{ *pulumi.OutputState }

func (CodeDeployMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeDeploy)(nil)).Elem()
}

func (o CodeDeployMapOutput) ToCodeDeployMapOutput() CodeDeployMapOutput {
	return o
}

func (o CodeDeployMapOutput) ToCodeDeployMapOutputWithContext(ctx context.Context) CodeDeployMapOutput {
	return o
}

func (o CodeDeployMapOutput) MapIndex(k pulumi.StringInput) CodeDeployOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CodeDeploy {
		return vs[0].(map[string]*CodeDeploy)[vs[1].(string)]
	}).(CodeDeployOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CodeDeployInput)(nil)).Elem(), &CodeDeploy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeDeployArrayInput)(nil)).Elem(), CodeDeployArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeDeployMapInput)(nil)).Elem(), CodeDeployMap{})
	pulumi.RegisterOutputType(CodeDeployOutput{})
	pulumi.RegisterOutputType(CodeDeployArrayOutput{})
	pulumi.RegisterOutputType(CodeDeployMapOutput{})
}
