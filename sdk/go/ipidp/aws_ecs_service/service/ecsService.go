// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ipidp/sdk/go/ipidp/aws_ecs_service/blue_green"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EcsService struct {
	pulumi.ResourceState

	CodeDeploy aws_ecs_serviceblue_green.CodeDeployOutput `pulumi:"codeDeploy"`
	EcrImage   EcrImageOutput                             `pulumi:"ecrImage"`
}

// NewEcsService registers a new resource with the given unique name, arguments, and options.
func NewEcsService(ctx *pulumi.Context,
	name string, args *EcsServiceArgs, opts ...pulumi.ResourceOption) (*EcsService, error) {
	if args == nil {
		args = &EcsServiceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource EcsService
	err := ctx.RegisterRemoteComponentResource("ipidp:aws_ecs_service/service:EcsService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type ecsServiceArgs struct {
}

// The set of arguments for constructing a EcsService resource.
type EcsServiceArgs struct {
}

func (EcsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsServiceArgs)(nil)).Elem()
}

type EcsServiceInput interface {
	pulumi.Input

	ToEcsServiceOutput() EcsServiceOutput
	ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput
}

func (*EcsService) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsService)(nil)).Elem()
}

func (i *EcsService) ToEcsServiceOutput() EcsServiceOutput {
	return i.ToEcsServiceOutputWithContext(context.Background())
}

func (i *EcsService) ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceOutput)
}

// EcsServiceArrayInput is an input type that accepts EcsServiceArray and EcsServiceArrayOutput values.
// You can construct a concrete instance of `EcsServiceArrayInput` via:
//
//	EcsServiceArray{ EcsServiceArgs{...} }
type EcsServiceArrayInput interface {
	pulumi.Input

	ToEcsServiceArrayOutput() EcsServiceArrayOutput
	ToEcsServiceArrayOutputWithContext(context.Context) EcsServiceArrayOutput
}

type EcsServiceArray []EcsServiceInput

func (EcsServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsService)(nil)).Elem()
}

func (i EcsServiceArray) ToEcsServiceArrayOutput() EcsServiceArrayOutput {
	return i.ToEcsServiceArrayOutputWithContext(context.Background())
}

func (i EcsServiceArray) ToEcsServiceArrayOutputWithContext(ctx context.Context) EcsServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceArrayOutput)
}

// EcsServiceMapInput is an input type that accepts EcsServiceMap and EcsServiceMapOutput values.
// You can construct a concrete instance of `EcsServiceMapInput` via:
//
//	EcsServiceMap{ "key": EcsServiceArgs{...} }
type EcsServiceMapInput interface {
	pulumi.Input

	ToEcsServiceMapOutput() EcsServiceMapOutput
	ToEcsServiceMapOutputWithContext(context.Context) EcsServiceMapOutput
}

type EcsServiceMap map[string]EcsServiceInput

func (EcsServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsService)(nil)).Elem()
}

func (i EcsServiceMap) ToEcsServiceMapOutput() EcsServiceMapOutput {
	return i.ToEcsServiceMapOutputWithContext(context.Background())
}

func (i EcsServiceMap) ToEcsServiceMapOutputWithContext(ctx context.Context) EcsServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsServiceMapOutput)
}

type EcsServiceOutput struct{ *pulumi.OutputState }

func (EcsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsService)(nil)).Elem()
}

func (o EcsServiceOutput) ToEcsServiceOutput() EcsServiceOutput {
	return o
}

func (o EcsServiceOutput) ToEcsServiceOutputWithContext(ctx context.Context) EcsServiceOutput {
	return o
}

func (o EcsServiceOutput) CodeDeploy() aws_ecs_serviceblue_green.CodeDeployOutput {
	return o.ApplyT(func(v *EcsService) aws_ecs_serviceblue_green.CodeDeployOutput { return v.CodeDeploy }).(aws_ecs_serviceblue_green.CodeDeployOutput)
}

func (o EcsServiceOutput) EcrImage() EcrImageOutput {
	return o.ApplyT(func(v *EcsService) EcrImageOutput { return v.EcrImage }).(EcrImageOutput)
}

type EcsServiceArrayOutput struct{ *pulumi.OutputState }

func (EcsServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsService)(nil)).Elem()
}

func (o EcsServiceArrayOutput) ToEcsServiceArrayOutput() EcsServiceArrayOutput {
	return o
}

func (o EcsServiceArrayOutput) ToEcsServiceArrayOutputWithContext(ctx context.Context) EcsServiceArrayOutput {
	return o
}

func (o EcsServiceArrayOutput) Index(i pulumi.IntInput) EcsServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsService {
		return vs[0].([]*EcsService)[vs[1].(int)]
	}).(EcsServiceOutput)
}

type EcsServiceMapOutput struct{ *pulumi.OutputState }

func (EcsServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsService)(nil)).Elem()
}

func (o EcsServiceMapOutput) ToEcsServiceMapOutput() EcsServiceMapOutput {
	return o
}

func (o EcsServiceMapOutput) ToEcsServiceMapOutputWithContext(ctx context.Context) EcsServiceMapOutput {
	return o
}

func (o EcsServiceMapOutput) MapIndex(k pulumi.StringInput) EcsServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsService {
		return vs[0].(map[string]*EcsService)[vs[1].(string)]
	}).(EcsServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceInput)(nil)).Elem(), &EcsService{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceArrayInput)(nil)).Elem(), EcsServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsServiceMapInput)(nil)).Elem(), EcsServiceMap{})
	pulumi.RegisterOutputType(EcsServiceOutput{})
	pulumi.RegisterOutputType(EcsServiceArrayOutput{})
	pulumi.RegisterOutputType(EcsServiceMapOutput{})
}
